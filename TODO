TODO list:

Bugs:
	- the type of an array in Ref.g is just a single item of the type itself, so x : int[] just makes x a single int variable
		- i need to make it an actual array type
		- only supporting a one-dimensional array right now
	- when not supplying the correct values to a method, i need a friendlier error message

Documentation:
- Finish the CeriumReferenceManual.pdf
	- This is somewhat dependent on the code generator being completed
- Add documentation for each class and its methods
	- JavaDoc is one step
	- Adding a Developer Manual is another important piece, so that we can quickly see which class is responsible for what (lexing, parsing, semantics, etc.)

Code Generation:
- I started the code generator using StringTemplate. I'm going to just generate equivalent Java code and compile it down to .class files to start with
- need the ability to reference any .class in Java, so we can reuse everything and anything written in Java
	- maybe need a "-addJavaSupport" option to the compiler
  
Additional Language Features:
- need an "else if" branch on if statements (we only have if else right now)
- support for classes defined in other files
	- Cerium.g allows for package declarations, but we'll need to pass that along or carry it along for code generation
	- same goes for the import statements
- add semantic analysis to check that when you call methods or attributes outside of the current class, that they are not marked as private
- ** after basic compiler features, i'll need to write some library methods to handle string to int conversions and other basic features
     ** i think these would end up in a cerium.lang.<something> package
- add a for loop
- add a symbol class for handling the main method, which will be "func main(args : String[])"
- make ": void" optional on methods, so that void is just the default return type on methods

- how hard would it be to make the semicolon optional at the end of statements?
- how hard would it be to make the parentheses optional on a method declaration if there are no parameters?

- add a 'final' feature for constants
- main method... maybe just call it "main" and it takes an array of strings as input and has void return type

- do we need a "this" and "super" ?
- interfaces and abstract classes

- operator overloading would be cool!

- console I/O and file I/O
	- need to decide if I'm going to have a runtime library for things like file I/O and console I/O or if I'll just generate bytecodes for all of it (so we won't need to carry around a runtime library)
 